{"./":{"url":"./","title":"Introduction","keywords":"","body":"书籍简介 这是我的第一本在线书籍，或者称之为”手册”，之所以选择gitbook，它有几个优势。 一、在线阅读，无需下载，不分地点和设备都方便查看。 二、动态性，内容随时可以修改补充，也可在读者和作者之间建立交流的渠道。 三、书籍一样的组织，知识易体系化，也有更好的阅读体验。 其实早就想尝试写一本什么，趁这段时间在学习和整理JavaScript相关的知识，就顺便总结一些有关“数据结构和算法”的东西，我并不精通，这些总结，也是用来帮助自己梳理的同时，希望能够帮到想要学习的你。 Copyright © ideazhao 2020 all right reserved，powered by Gitbook本书发布时间： 2020-03-04 22:14:36 "},"Array.html":{"url":"Array.html","title":"数组","keywords":"","body":"数组 把数组列为数据结构的一种，你可能不适应，因为太熟悉了，和那些看起来难懂、写也不会写的数据结构相比，根本不是一类东西。 但其实，这只是一种错觉，那些东西你不熟，仅仅是因为见得少，用得少，多了也一样。 数组是一种存储元素的线性集合，元素可以通过索引来进行存取，然而，在javascript中，数组也是一种对象，它的索引在内部仍然被处理成字符串，就像对象的属性名那样，所以当我们使用”typeof 某数组“的时候，会显示object。 创建 var arr = []; //字面量 var arr = new Array(); //构造函数 几个tips： 一、数组元素不定类型，可以是任意类型，它仅仅是用来存储数据的容器，例如： [2,\"idea\",true,null] 二、[1,2,3]和 new Array(1,2,3)效果一样，但[3]和new Array(3)就不一样了，后者会把单独的数字当做数组长度 三、可以不管原本数组length多少，直接访问array[任意数字]，也可以直接修改length的值，当然，只是不会报错，对数组本身是有影响的，访问原本没有的位置会填充undefined，修改的length要么将数组裁剪，要么增加新的undefined. 四、既然数组元素不定类型，那么它也可以是数组，就形成了二维数组，甚至多维数组，就像这样： [[1,2],[3,4]],我们想访问数字2，就是[0][1] 判断 有什么方法可以判断一个对象是数组，前面说了typeof做不到，那么还有两种简单的办法： arr instanceof Array 和 Array.isArray(arr) 如果arr是数组，二者都会返回true。 用途 数组看起来是一种特定的数据形式，但用途十分广泛，甚至于说”每个js文件当中都有数组“都不为过。 为什么呢，因为其简单且常见的存储形式，能够对应很多场景的存取需要，二来，强大的方法体系。 只要涉及列表的生成，增、删、改、查，都可以用到数组。 方法 数组的方法有很多，很简单的就不说了，我们分类看看那些常用的方法。 增、删 push()/pop()、unshift()/shift() arr = [1,2,3]; //push()方法后面增加 arr.push(4); // 修改后 [1,2,3,4]; //pop()方法后面删除 arr.pop(); // 修改后 [1,2,3]; 这里有个细节，push()可以一次添加多个，push(4，5，6) // 修改后 [1,2,3,4,5,6];且返回的是数组的length。而pop()方法只能删除一个，返回删掉的那个元素。unshift()方法前面增加，shift()方法前面删除，效果和前两者相同，但方向相反，不再赘述。 查询 indexOf() var nameList = [\"张三\",\"李四\",\"王二\"]; var target1 = \"张三\"; var target2 = \"帅哥\"; nameList.indexOf(target1); //有，返回具体索引位置 0 nameList.indexOf(target2); //没有，返回 -1 这是十分常见且被广泛使用的一种方法，它还有个兄弟是 lastIndexOf()，从后面开始检索，但如果数组里有多个，它们只会返回遇到的第一个元素的索引。 不过，ES6版本之后，又多了一种新的方法供使用，且表意更清晰，结果更直观。 includes() 以上面为例： nameList.includes(target1); //有，true nameList.includes(target2); //没有，false 这个方法用来判断”有没有“是要比上面方法更方便，但如果的确需要索引，还是可以使用上面方法。 生成 数组转字符串 join() var nameList = [\"张三\",\"李四\",\"王二\"]; nameList.join(\"和\"); // \"张三和李四和王二\" 可以看出，join()方法就是使用它的参数(默认是逗号)，把数组的每一项连接起来，生成一个字符串，这就很强大了，你可以发挥想象，譬如：\"张三&&李四&&王二\"、\"2020-02-02\",等等。 当然，还有个万能通用方法——toString(),基本什么遇到它都怪怪转字符串，除非此方法不可用，但相比之下就没有join()那么灵活了。 字符串转数组 split() 这个方法跟join()像是两个相反的过程，join()方法会提供一个用来连接字符的符号组成字符串，哪怕是空格，split()同样，需要有个分割的标志。 var str = \"张三 李四 王二\"; str.split(\" \"); // [\"张三\", \"李四\", \"王二\"] var date = \"2020-02-02\"; date.split(\"-\"); // [\"2020\", \"02\", \"02\"] 改变原数组 什么叫”改变原数组“，因为对数组产生影响的方法不少，有些直接改变原数组，而另外的会生成新数组，上面”增、删“的方法已经是改变原数组，另外还有一些方法会改变原数组。 生成新数组 concat()——连接两个数组 var firstStr = [1,2,3,4]; var secondStr = [5,6,7,8]; var resultStr = firstStr.concat(secondStr); // [1, 2, 3, 4, 5, 6, 7, 8] splice()——截取已有数组的一部分 var startStr = [\"姓\",\"名\",\":\",\"i\",\"d\",\"e\",\"a\"]; var endStr = startStr.splice(3,4).join(\"\"); // \"idea\" 这里小小地把两种方法结合了一下，特地把英文字符的名字取出来，并连接成字符串。 遍历 遍历是个再常用不过的手段，你总会看到诸如这样的代码： var arr = [11,111,1111]; for(var i = 0;i100){ console.log(arr[i]); } } // 输出 111和1111 当然，这里只是很简单的示例，实际上要比这个强大和灵活地多，但意思就是——查看每个元素，符合某种条件的做一类操作，不符合的另做处理。 上面使用的是最普遍的for循环，除此之外，还有其他遍历方法： 排序 去重 拷贝 浅拷贝 深拷贝 Copyright © ideazhao 2020 all right reserved，powered by Gitbook本书发布时间： 2020-03-06 16:35:36 "}}